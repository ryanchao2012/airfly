# Auto generated by 'inv collect-airflow'
from airfly._vendor.airflow.models.baseoperator import BaseOperator
from airfly._vendor.airflow.models.skipmixin import SkipMixin
from airfly._vendor.airflow.operators.branch import BranchMixIn


class PythonOperator(BaseOperator):
    python_callable: "Callable"
    op_args: "Collection[Any] | None"
    op_kwargs: "Mapping[str, Any] | None"
    templates_dict: "dict[str, Any] | None"
    templates_exts: "Sequence[str] | None"
    show_return_value_in_logs: "bool"


class _BasePythonVirtualenvOperator(PythonOperator):
    python_callable: "Callable"
    serializer: "_SerializerTypeDef | None"
    op_args: "Collection[Any] | None"
    op_kwargs: "Mapping[str, Any] | None"
    string_args: "Iterable[str] | None"
    templates_dict: "dict | None"
    templates_exts: "list[str] | None"
    expect_airflow: "bool"
    skip_on_exit_code: "int | Container[int] | None"
    env_vars: "dict[str, str] | None"
    inherit_env: "bool"
    use_dill: "bool"


class ExternalPythonOperator(_BasePythonVirtualenvOperator):
    python: "str"
    python_callable: "Callable"
    serializer: "_SerializerTypeDef | None"
    op_args: "Collection[Any] | None"
    op_kwargs: "Mapping[str, Any] | None"
    string_args: "Iterable[str] | None"
    templates_dict: "dict | None"
    templates_exts: "list[str] | None"
    expect_airflow: "bool"
    expect_pendulum: "bool"
    skip_on_exit_code: "int | Container[int] | None"
    env_vars: "dict[str, str] | None"
    inherit_env: "bool"
    use_dill: "bool"


class BranchExternalPythonOperator(ExternalPythonOperator, BranchMixIn):
    python: "str"
    python_callable: "Callable"
    serializer: "_SerializerTypeDef | None"
    op_args: "Collection[Any] | None"
    op_kwargs: "Mapping[str, Any] | None"
    string_args: "Iterable[str] | None"
    templates_dict: "dict | None"
    templates_exts: "list[str] | None"
    expect_airflow: "bool"
    expect_pendulum: "bool"
    skip_on_exit_code: "int | Container[int] | None"
    env_vars: "dict[str, str] | None"
    inherit_env: "bool"
    use_dill: "bool"


class BranchPythonOperator(PythonOperator, BranchMixIn):
    python_callable: "Callable"
    op_args: "Collection[Any] | None"
    op_kwargs: "Mapping[str, Any] | None"
    templates_dict: "dict[str, Any] | None"
    templates_exts: "Sequence[str] | None"
    show_return_value_in_logs: "bool"


class PythonVirtualenvOperator(_BasePythonVirtualenvOperator):
    python_callable: "Callable"
    requirements: "None | Iterable[str] | str"
    python_version: "str | None"
    serializer: "_SerializerTypeDef | None"
    system_site_packages: "bool"
    pip_install_options: "list[str] | None"
    op_args: "Collection[Any] | None"
    op_kwargs: "Mapping[str, Any] | None"
    string_args: "Iterable[str] | None"
    templates_dict: "dict | None"
    templates_exts: "list[str] | None"
    expect_airflow: "bool"
    skip_on_exit_code: "int | Container[int] | None"
    index_urls: "None | Collection[str] | str"
    venv_cache_path: "None | os.PathLike[str]"
    env_vars: "dict[str, str] | None"
    inherit_env: "bool"
    use_dill: "bool"


class BranchPythonVirtualenvOperator(PythonVirtualenvOperator, BranchMixIn):
    python_callable: "Callable"
    requirements: "None | Iterable[str] | str"
    python_version: "str | None"
    serializer: "_SerializerTypeDef | None"
    system_site_packages: "bool"
    pip_install_options: "list[str] | None"
    op_args: "Collection[Any] | None"
    op_kwargs: "Mapping[str, Any] | None"
    string_args: "Iterable[str] | None"
    templates_dict: "dict | None"
    templates_exts: "list[str] | None"
    expect_airflow: "bool"
    skip_on_exit_code: "int | Container[int] | None"
    index_urls: "None | Collection[str] | str"
    venv_cache_path: "None | os.PathLike[str]"
    env_vars: "dict[str, str] | None"
    inherit_env: "bool"
    use_dill: "bool"


class ShortCircuitOperator(PythonOperator, SkipMixin):
    ignore_downstream_trigger_rules: "bool"
